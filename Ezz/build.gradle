// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        kotlin_version = "1.5.21"
    }
    repositories {
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
            // https://stackoverflow.com/questions/68585885/allow-insecure-protocols-android-gradle
            allowInsecureProtocol = true
        }
        maven { url 'https://maven.aliyun.com/repository/google' }
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.30"
        classpath "com.alibaba:arouter-register:1.0.2"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

/**
 * 如果在多项目构建中，可能想把插件应用到子项目中，apply false 来告诉 Gradle 不要应用插件
 *
 * plugins {} 默认的行为是解析和应用插件
 */
plugins {
    // 这个 id 就是在 versionPlugin 文件夹下 build.gradle 文件内定义的id
    id "com.wdl.versionplugin" apply false
}

subprojects { subproject ->
    // 默认应用所有子项目中
    apply plugin: 'com.wdl.versionplugin'

    if (subproject.name == "app") {
        apply plugin: 'com.android.application'
    }

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'kotlin-kapt'

    if (subproject.name.startsWith("ez_") && subproject.name != "ez_provider") {
        apply plugin: 'com.android.library'

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", subproject.getName())
            }
        }

        dependencies {
            kapt 'com.alibaba:arouter-compiler:1.5.2'
        }
    }

    // 如果想应用到某个子项目中，可以通过 subproject.name 来判断应用在哪个子项目中
    // subproject.name 是你子项目的名字，示例如下
    // 官方文档地址：https://guides.gradle.org/creating-multi-project-builds/#add_documentation
    //    if (subproject.name == "app") {
    //        apply plugin: 'com.android.application'
    //
    //    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}