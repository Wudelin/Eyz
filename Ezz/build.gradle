import com.wdl.versionplugin.*

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
//        maven {
//            url 'http://maven.aliyun.com/nexus/content/groups/public/'
//            // https://stackoverflow.com/questions/68585885/allow-insecure-protocols-android-gradle
//            allowInsecureProtocol = true
//        }
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
        maven {
            url 'https://maven.aliyun.com/repository/google'
        }
        maven {
            url 'https://maven.aliyun.com/repository/gradle-plugin'
        }

        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.3'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.0'
        classpath "com.alibaba:arouter-register:1.0.2"
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.40'
        classpath 'io.github.didi.dokit:dokitx-plugin:3.5.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

/**
 * 如果在多项目构建中，可能想把插件应用到子项目中，apply false 来告诉 Gradle 不要应用插件
 *
 * plugins {} 默认的行为是解析和应用插件
 */
plugins {
    // 这个 id 就是在 versionPlugin 文件夹下 build.gradle 文件内定义的id
    id "com.wdl.versionplugin" apply false
}

subprojects { subproject ->
    // 默认应用所有子项目中
    apply plugin: 'com.wdl.versionplugin'

    if (subproject.name.startsWith("ez_")) {
        apply plugin: 'com.android.library'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-kapt'
        if (subproject.name != "ez_provider")
            apply plugin: 'dagger.hilt.android.plugin'

        configureAndroid(subproject)

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", subproject.getName())
            }
        }

        dependencies {
            implementation fileTree(dir: "libs", include: ["*.jar"])
            kapt ARouter.router
            testImplementation Test.junit
            androidTestImplementation Test.junitExt
            androidTestImplementation Test.espressoCore

            if (subproject.name != "ez_provider") {
                api project(path: ':ez_provider')
                api Hilt.hiltAndroid
                kapt Hilt.hiltCompiler
                kapt Hilt.hiltAndroidXCompiler
            } else {
                api project(path: ':lib_common')
            }
        }
    }

    if (subproject.name == "lib_common") {
        apply plugin: 'com.android.library'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-kapt'
        apply plugin: 'dagger.hilt.android.plugin'

        configureAndroid(subproject)

        dependencies {
            api Androidx.startupRuntime
            api Compose.ui
            api Compose.runtime
            api Compose.material
            api Compose.toolingPreview
            api Hilt.hiltAndroid
            kapt Hilt.hiltCompiler
            kapt Hilt.hiltAndroidXCompiler

            api Room.roomRuntime
            api Room.roomKtx
            kapt Room.roomCompiler
        }
    }

    // 如果想应用到某个子项目中，可以通过 subproject.name 来判断应用在哪个子项目中
    // subproject.name 是你子项目的名字，示例如下
    // 官方文档地址：https://guides.gradle.org/creating-multi-project-builds/#add_documentation
    //    if (subproject.name == "app") {
    //        apply plugin: 'com.android.application'
    //
    //    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


public void configureAndroid(Project project) {
    project.android {
        compileSdk BuildVersion.compileSdk

        defaultConfig {
            minSdk BuildVersion.minSdk
            targetSdk BuildVersion.targetSdk
            versionCode BuildVersion.versionCode
            versionName BuildVersion.versionName

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            vectorDrawables {
                useSupportLibrary true
            }

            javaCompileOptions {
                annotationProcessorOptions {
                    arguments["room.incremental"] = "true"
                }
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = BuildVersion.jvmTarget
            useIR = true
        }
        buildFeatures {
            compose true
            viewBinding true
        }
        composeOptions {
            kotlinCompilerExtensionVersion Version.composeVersion
            kotlinCompilerVersion Version.kotlinVersion
        }
        packagingOptions {
            resources {
                excludes += '/META-INF/{AL2.0,LGPL2.1}'
            }
        }
    }
}